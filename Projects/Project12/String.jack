// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let chars = Array.new(1);
        }
        else {
            let chars = Array.new(maxLength);
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(chars);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let chars[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, n, value;
        let value = 0;

        if (length > 0) {
            // Test for minus character
            if (chars[0] = 45) {
                let i = 1;
            }
            else {
                let i = 0;
            }

            while (i < length) {
                let n = chars[i] - 48; 
                if ((n < 0) | (n > 9)) {
                    let i = length;
                }
                else {
                    let value = value * 10 + n;
                    let i = i + 1;
                }
            }

            if (chars[0] = 45) {
                let value = -value;
            }
        }

        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if (val < 0) {
            do appendChar(45); // Minus character
            do setNegativeInt(val);
        }
        else {
            do setNegativeInt(-val);
        }
        return;
    }

    /** Sets this string to hold a representation of the given value between -32768 and 0 */
    method void setNegativeInt(int val) {
        var int n;
        if (val < -10) {
            do setNegativeInt(val / 10);
            let val = val - ((val / 10) * 10);
        }
        do appendChar(-val + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}