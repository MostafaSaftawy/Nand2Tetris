// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767;
        return;
    }

    /** Returns true if i-th LSB of x is 1, false if 0 */
    function boolean bit (int x, int i) {
        var int j, shiftedX;
        if (i = 15) {
            return (x < 0);
        }

        let j = 14;
        if (Math.bit(x,15)) {
            let shiftedX = x + 32767 + 1;
        } else {
            let shiftedX = x;
        }
        while (j > i) {
            if (shiftedX > (twoToThe[j] - 1)) {
                let shiftedX = shiftedX - twoToThe[j];
            }
            let j = j - 1;
        }

        return (shiftedX > (twoToThe[j] - 1));
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        return (Math.max(x, -x));
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, sum, shiftedX;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i<16) {
            if (Math.bit(y,i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int absX, absY, q;
        var int negDiv;
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        if (absX = x) {
            if (absY = y) {
                let negDiv = 1;
            } else {
                let negDiv = -1;
            }
        } else {
            if (absY = y) {
                let negDiv = -1;
            } else {
                let negDiv = 1;
            }
        }

        if ((absY>absX) | (absY<0)) {
            return 0;
        }
        let q = Math.divide(absX, 2*absY);
        if ((absX - (2 * absY * q)) < absY) {
            return negDiv * 2 * q;
        } else {
            return negDiv * ((2 * q) + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y;
        let y = 0;
        let j = 7;
        if (x = 32767) {
            return 181;
        }
        while (j > -1) {
            if ( ((y+twoToThe[j]) * (y+twoToThe[j])) < (x+1) ) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
